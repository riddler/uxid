// AUTOGENERATED FILE - DO NOT EDIT
package uxid

import (
	"testing"
  "github.com/stretchr/testify/assert"
)

{% if api_tests %}
func Test_{{ group_id }}{{ spec_id }}_API(t *testing.T) {
  t.Parallel()

{% for test in api_tests %}
{% capture args_string %}{% for arg in test.args %}"{{ arg }}"{% endfor %}{% endcapture %}
  t.Run("{{ test.name }}", func(t *testing.T) {
    got, err := {{ test.method | capitalize }}({{ args_string }})
    assert.Nil(t, err)
    assert.NotNil(t, got)
  })
{% endfor %}
}
{% endif %}

{% if decoder_tests %}
func Test_{{ group_id }}{{ spec_id }}_Decoder(t *testing.T) {
  t.Parallel()

{% for test in decoder_tests %}
  t.Run("{{ test.name }}", func(t *testing.T) {
    inputString := "{{ test.input }}"
{% if test.error_message %}
    got, err := Decode(inputString)
    assert.Nil(t, got)
    assert.Error(t, err)
{% elsif test.verify %}
    got, err := Decode(inputString)
    assert.Nil(t, err)
    // assert isinstance(decoded_id, uxid.UXID)
    if (assert.NotNil(t, got)) {
{% if test.verify.encoded %}    assert.Equal(t, got.encoded, "{{ test.verify.encoded }}"){% endif %}
{% if test.verify.time %}    assert.Equal(t, got.time, {{ test.verify.time }}){% endif %}
    }
{% else %}
    assert.NotNil(t, got)
{% endif %}
  })
{% endfor %}
}
{% endif %}
